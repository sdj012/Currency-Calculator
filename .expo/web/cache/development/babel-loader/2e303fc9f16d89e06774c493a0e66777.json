{"ast":null,"code":"import { createSlice, configureStore, counterSlice } from '@reduxjs/toolkit';\nvar initialState = {\n  value: 0\n};\nvar test = createSlice({\n  name: 'test',\n  initialState: {\n    value: 0\n  },\n  reducers: {\n    testStore: function testStore(state, action) {\n      console.log(\"testStore, action.payload = \" + action.payload);\n      state.value += 1;\n      console.log(\"state.value is: \" + state.value);\n    }\n  }\n});\nvar testStore = test.actions.testStore;\nexport { testStore };\nexport default test.reducer;","map":{"version":3,"sources":["/Users/sdj/Desktop/WEB/ReactNativeProject-purchaseGuide-1/my-app/store/testSlice.js"],"names":["createSlice","configureStore","counterSlice","initialState","value","test","name","reducers","testStore","state","action","console","log","payload","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,EAAsCC,YAAtC,QAA0D,kBAA1D;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;AAIA,IAAMC,IAAI,GAAGL,WAAW,CAAC;AAEvBM,EAAAA,IAAI,EAAE,MAFiB;AAGvBH,EAAAA,YAAY,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAHS;AAIvBG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,mBAACC,KAAD,EAAOC,MAAP,EAAkB;AAK3BC,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiCF,MAAM,CAACG,OAApD;AACAJ,MAAAA,KAAK,CAACL,KAAN,IAAa,CAAb;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBH,KAAK,CAACL,KAAvC;AACD;AATO;AAJa,CAAD,CAAxB;AAkBO,IAAQI,SAAR,GAAsBH,IAAI,CAACS,OAA3B,CAAQN,SAAR;;AAEP,eAAeH,IAAI,CAACU,OAApB","sourcesContent":["import { createSlice, configureStore, counterSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  value: 0,\n}\n\nconst test = createSlice({\n  //Package\n  name: 'test',\n  initialState: { value: 0 },\n  reducers: {\n    testStore: (state,action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      console.log(\"testStore, action.payload = \" + action.payload)\n      state.value+=1\n      console.log(\"state.value is: \" + state.value)\n    },\n  }\n})\n\n\nexport const { testStore } = test.actions\n\nexport default test.reducer;\n\n\n// Can still subscribe to the store\n// store.subscribe(() => console.log(store.getState()))\n"]},"metadata":{},"sourceType":"module"}