{"ast":null,"code":"import { createSlice, configureStore, counterSlice } from '@reduxjs/toolkit';\nvar target = createSlice({\n  name: 'target',\n  initialState: {\n    value: 0\n  },\n  reducers: {\n    targetStore: function targetStore(state, action) {\n      console.log(\"targetStore, action.payload = \" + action.payload);\n      state.value = action.payload;\n      console.log(\"targetStore state.target is: \" + state.value);\n    }\n  }\n});\nvar targetStore = target.actions.targetStore;\nexport { targetStore };\nexport default target.reducer;","map":{"version":3,"sources":["/Users/sdj/Desktop/WEB/ReactNativeProject-purchaseGuide-1/my-app/Store/targetSlice.js"],"names":["createSlice","configureStore","counterSlice","target","name","initialState","value","reducers","targetStore","state","action","console","log","payload","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,EAAsCC,YAAtC,QAA0D,kBAA1D;AAEA,IAAMC,MAAM,GAAGH,WAAW,CAAC;AAEzBI,EAAAA,IAAI,EAAE,QAFmB;AAGzBC,EAAAA,YAAY,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAHW;AAIzBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAE,qBAACC,KAAD,EAAOC,MAAP,EAAkB;AAK7BC,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAmCF,MAAM,CAACG,OAAtD;AACAJ,MAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACG,OAArB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,kCAAkCH,KAAK,CAACH,KAApD;AACD;AATO;AAJe,CAAD,CAA1B;AAiBO,IAAQE,WAAR,GAAwBL,MAAM,CAACW,OAA/B,CAAQN,WAAR;;AAEP,eAAeL,MAAM,CAACY,OAAtB","sourcesContent":["import { createSlice, configureStore, counterSlice } from '@reduxjs/toolkit'\n\nconst target = createSlice({\n  //Package\n  name: 'target',\n  initialState: { value: 0 },\n  reducers: {\n    targetStore: (state,action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      console.log(\"targetStore, action.payload = \" + action.payload)\n      state.value = action.payload\n      console.log(\"targetStore state.target is: \" + state.value)\n    },\n  }\n})\n\nexport const { targetStore } = target.actions\n\nexport default target.reducer;\n\n\n// Can still subscribe to the store\n// store.subscribe(() => console.log(store.getState()))\n"]},"metadata":{},"sourceType":"module"}