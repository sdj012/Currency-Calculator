{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createSlice, createAsyncThunk, configureStore, counterSlice } from '@reduxjs/toolkit';\nimport getOptions from \"../Utils\";\nvar fetchOptions = createAsyncThunk('optionsSlice/getOptions', function _callee(getState) {\n  var state, packages, options;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          state = getState();\n          packages = state.settings.configurations.map(function (configuration) {\n            return configuration.id;\n          });\n          options = [];\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(configureSet(state.target.value, packages));\n\n        case 5:\n          options = _context.sent;\n          console.log(\"fetchOptions: \" + options);\n          return _context.abrupt(\"return\", options);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nvar options = createSlice({\n  name: 'options',\n  initialState: {\n    options: []\n  },\n  reducers: {\n    optionsStore: function optionsStore(state, action) {\n      console.log(\"optionsStore, action.payload = \" + action.payload);\n      console.log(\"state.value is: \" + state.value);\n    }\n  },\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchOptions.fulfilled, function (state, action) {\n      state.options.push(action.payload);\n    });\n  }\n});\nvar optionsStore = options.actions.optionsStore;\nexport { optionsStore };\nexport default options.reducer;","map":{"version":3,"sources":["/Users/sdj/Desktop/WEB/ReactNativeProject-purchaseGuide-1/my-app/Store/optionsSlice.js"],"names":["createSlice","createAsyncThunk","configureStore","counterSlice","getOptions","fetchOptions","getState","state","packages","settings","configurations","map","configuration","id","options","configureSet","target","value","console","log","name","initialState","reducers","optionsStore","action","payload","extraReducers","builder","addCase","fulfilled","push","actions","reducer"],"mappings":";AAAA,SAASA,WAAT,EAAqBC,gBAArB,EAAuCC,cAAvC,EAAuDC,YAAvD,QAA2E,kBAA3E;AACA,OAAOC,UAAP;AAGA,IAAMC,YAAY,GAAGJ,gBAAgB,CAAE,yBAAF,EAA6B,iBAAOK,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1DC,UAAAA,KAD0D,GACnDD,QAAQ,EAD2C;AAE5DE,UAAAA,QAF4D,GAEnDD,KAAK,CAACE,QAAN,CAAeC,cAAf,CAA8BC,GAA9B,CAAkC,UAAAC,aAAa;AAAA,mBAAIA,aAAa,CAACC,EAAlB;AAAA,WAA/C,CAFmD;AAG5DC,UAAAA,OAH4D,GAGpD,EAHoD;AAAA;AAAA,2CAIlDC,YAAY,CAACR,KAAK,CAACS,MAAN,CAAaC,KAAd,EAAqBT,QAArB,CAJsC;;AAAA;AAIhEM,UAAAA,OAJgE;AAKhEI,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBL,OAA/B;AALgE,2CAMzDA,OANyD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA7B,CAArC;AASA,IAAMA,OAAO,GAAGd,WAAW,CAAC;AAE1BoB,EAAAA,IAAI,EAAE,SAFoB;AAG1BC,EAAAA,YAAY,EAAE;AAAEP,IAAAA,OAAO,EAAC;AAAV,GAHY;AAI1BQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,EAAE,sBAAChB,KAAD,EAAOiB,MAAP,EAAkB;AAK9BN,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoCK,MAAM,CAACC,OAAvD;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBZ,KAAK,CAACU,KAAvC;AACD;AARO,GAJgB;AAe1BS,EAAAA,aAAa,EAAE,uBAACC,OAAD,EAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,YAAY,CAACwB,SAA7B,EAAwC,UAACtB,KAAD,EAAOiB,MAAP,EAAkB;AACxDjB,MAAAA,KAAK,CAACO,OAAN,CAAcgB,IAAd,CAAmBN,MAAM,CAACC,OAA1B;AACD,KAFD;AAGD;AAnByB,CAAD,CAA3B;AAsBO,IAAQF,YAAR,GAAyBT,OAAO,CAACiB,OAAjC,CAAQR,YAAR;;AAEP,eAAeT,OAAO,CAACkB,OAAvB","sourcesContent":["import { createSlice,createAsyncThunk, configureStore, counterSlice } from '@reduxjs/toolkit'\nimport getOptions from '../Utils'\n// Thunk\n\nconst fetchOptions = createAsyncThunk ('optionsSlice/getOptions', async( getState ) => {\n  const state= getState();\n  let packages=state.settings.configurations.map(configuration => configuration.id);\n  let options=[];\n  options=await configureSet(state.target.value, packages);\n  console.log(\"fetchOptions: \" + options)\n  return options;\n})\n\nconst options = createSlice({\n  //Package\n  name: 'options',\n  initialState: { options:[] } ,\n  reducers: {\n    optionsStore: (state,action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      console.log(\"optionsStore, action.payload = \" + action.payload)\n      console.log(\"state.value is: \" + state.value)\n    },\n  },\n\n  extraReducers: (builder) => {\n    builder.addCase(fetchOptions.fulfilled, (state,action) => {\n      state.options.push(action.payload) // What Thunk Returns\n    })\n  }\n})\n\nexport const { optionsStore } = options.actions\n\nexport default options.reducer;\n\n\n// Can still subscribe to the store\n// store.subscribe(() => console.log(store.getState()))\n"]},"metadata":{},"sourceType":"module"}