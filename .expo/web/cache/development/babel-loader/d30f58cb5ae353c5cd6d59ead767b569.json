{"ast":null,"code":"import { createSlice, configureStore, counterSlice } from '@reduxjs/toolkit';\nvar test = createSlice({\n  name: 'test',\n  initialState: 0,\n  reducers: {\n    testStore: function testStore(state) {\n      state.value += 1;\n    }\n  }\n});\nvar series = createSlice({\n  name: 'Series',\n  initialState: [{\n    Size: 400\n  }, {\n    Size: 800\n  }, {\n    Size: 1700\n  }],\n  reducers: {\n    incremented: function incremented(state) {\n      state.value += 1;\n    },\n    decremented: function decremented(state) {\n      state.value -= 1;\n    }\n  }\n});\nvar createPackage = createSlice({\n  name: 'Create Package',\n  initialState: [{\n    Size: 400,\n    Price: 6.49\n  }, {\n    Size: 800,\n    Price: 12.99\n  }, {\n    Size: 1700,\n    Price: 25.99\n  }],\n  reducers: {\n    incremented: function incremented(state) {\n      state.value += 1;\n    },\n    decremented: function decremented(state) {\n      state.value -= 1;\n    }\n  }\n});\nvar optionsWORemainder = createSlice({\n  name: 'OptionsWORemainders',\n  initialState: [],\n  reducers: {\n    setOptions: function setOptions(state, action) {\n      console.log(\"redux store: set Options: \");\n      state.value.push(action.payload);\n    }\n  }\n});\nvar optionsWRemainder = createSlice({\n  name: 'OptionsWRemainders',\n  initialState: [{\n    Package: [],\n    Remainder: 0,\n    Price: 0\n  }],\n  reducers: {\n    incremented: function incremented(state) {\n      state.value += 1;\n    },\n    decremented: function decremented(state) {\n      state.value -= 1;\n    }\n  }\n});\nvar testStore = test.actions.testStore;\nexport { testStore };\nexport var store = configureStore({\n  reducer: {\n    test: test.reducer\n  }\n});\nstore.subscribe(function () {\n  return console.log(store.getState());\n});","map":{"version":3,"sources":["/Users/sdj/Desktop/WEB/ReactNativeProject-purchaseGuide-1/my-app/Store/store.js"],"names":["createSlice","configureStore","counterSlice","test","name","initialState","reducers","testStore","state","value","series","Size","incremented","decremented","createPackage","Price","optionsWORemainder","setOptions","action","console","log","push","payload","optionsWRemainder","Package","Remainder","actions","store","reducer","subscribe","getState"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,EAAsCC,YAAtC,QAA0D,kBAA1D;AAEA,IAAMC,IAAI,GAAGH,WAAW,CAAC;AAEvBI,EAAAA,IAAI,EAAE,MAFiB;AAGvBC,EAAAA,YAAY,EAAE,CAHS;AAIvBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,mBAAAC,KAAK,EAAI;AAKlBA,MAAAA,KAAK,CAACC,KAAN,IAAc,CAAd;AACD;AAPO;AAJa,CAAD,CAAxB;AAeA,IAAMC,MAAM,GAAGV,WAAW,CAAC;AAEzBI,EAAAA,IAAI,EAAE,QAFmB;AAGzBC,EAAAA,YAAY,EAAE,CAAE;AAAEM,IAAAA,IAAI,EAAE;AAAR,GAAF,EAAgB;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAAhB,EAA+B;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAA/B,CAHW;AAIzBL,EAAAA,QAAQ,EAAE;AACRM,IAAAA,WAAW,EAAE,qBAAAJ,KAAK,EAAI;AAKpBA,MAAAA,KAAK,CAACC,KAAN,IAAe,CAAf;AACD,KAPO;AAQRI,IAAAA,WAAW,EAAE,qBAAAL,KAAK,EAAI;AACpBA,MAAAA,KAAK,CAACC,KAAN,IAAe,CAAf;AACD;AAVO;AAJe,CAAD,CAA1B;AAkBA,IAAMK,aAAa,GAAGd,WAAW,CAAC;AAEhCI,EAAAA,IAAI,EAAE,gBAF0B;AAGhCC,EAAAA,YAAY,EAAE,CAAC;AAAEM,IAAAA,IAAI,EAAE,GAAR;AAAcI,IAAAA,KAAK,EAAE;AAArB,GAAD,EAA6B;AAAEJ,IAAAA,IAAI,EAAE,GAAR;AAAaI,IAAAA,KAAK,EAAE;AAApB,GAA7B,EAA0D;AAAEJ,IAAAA,IAAI,EAAE,IAAR;AAAcI,IAAAA,KAAK,EAAE;AAArB,GAA1D,CAHkB;AAIhCT,EAAAA,QAAQ,EAAE;AACRM,IAAAA,WAAW,EAAE,qBAAAJ,KAAK,EAAI;AAKpBA,MAAAA,KAAK,CAACC,KAAN,IAAe,CAAf;AACD,KAPO;AAQRI,IAAAA,WAAW,EAAE,qBAAAL,KAAK,EAAI;AACpBA,MAAAA,KAAK,CAACC,KAAN,IAAe,CAAf;AACD;AAVO;AAJsB,CAAD,CAAjC;AAkBA,IAAMO,kBAAkB,GAAGhB,WAAW,CAAC;AAErCI,EAAAA,IAAI,EAAE,qBAF+B;AAGrCC,EAAAA,YAAY,EAAE,EAHuB;AAIrCC,EAAAA,QAAQ,EAAE;AACRW,IAAAA,UAAU,EAAE,oBAACT,KAAD,EAAOU,MAAP,EAAkB;AAK5BC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACAZ,MAAAA,KAAK,CAACC,KAAN,CAAYY,IAAZ,CAAiBH,MAAM,CAACI,OAAxB;AACD;AARO;AAJ2B,CAAD,CAAtC;AAgBA,IAAMC,iBAAiB,GAAGvB,WAAW,CAAC;AAEpCI,EAAAA,IAAI,EAAE,oBAF8B;AAGpCC,EAAAA,YAAY,EAAE,CAAC;AAAEmB,IAAAA,OAAO,EAAE,EAAX;AAAeC,IAAAA,SAAS,EAAE,CAA1B;AAA6BV,IAAAA,KAAK,EAAE;AAApC,GAAD,CAHsB;AAIpCT,EAAAA,QAAQ,EAAE;AACRM,IAAAA,WAAW,EAAE,qBAAAJ,KAAK,EAAI;AAKpBA,MAAAA,KAAK,CAACC,KAAN,IAAe,CAAf;AACD,KAPO;AAQRI,IAAAA,WAAW,EAAE,qBAAAL,KAAK,EAAI;AACpBA,MAAAA,KAAK,CAACC,KAAN,IAAe,CAAf;AACD;AAVO;AAJ0B,CAAD,CAArC;AAmBO,IAAQF,SAAR,GAAsBJ,IAAI,CAACuB,OAA3B,CAAQnB,SAAR;;AAEP,OAAO,IAAMoB,KAAK,GAAG1B,cAAc,CAAC;AAClC2B,EAAAA,OAAO,EAAE;AACPzB,IAAAA,IAAI,EAAEA,IAAI,CAACyB;AADJ;AADyB,CAAD,CAA5B;AAQPD,KAAK,CAACE,SAAN,CAAgB;AAAA,SAAMV,OAAO,CAACC,GAAR,CAAYO,KAAK,CAACG,QAAN,EAAZ,CAAN;AAAA,CAAhB","sourcesContent":["import { createSlice, configureStore, counterSlice } from '@reduxjs/toolkit'\n\nconst test = createSlice({\n  //Package\n  name: 'test',\n  initialState: 0,\n  reducers: {\n    testStore: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value +=1\n    },\n  }\n})\n\nconst series = createSlice({\n  //Package\n  name: 'Series',\n  initialState: [ { Size: 400 },{ Size: 800 }, { Size: 1700 } ],\n  reducers: {\n    incremented: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decremented: state => {\n      state.value -= 1\n    }\n  }\n})\n\nconst createPackage = createSlice({\n  //Package\n  name: 'Create Package',\n  initialState: [{ Size: 400 , Price: 6.49 },{ Size: 800, Price: 12.99 }, { Size: 1700, Price: 25.99}],\n  reducers: {\n    incremented: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decremented: state => {\n      state.value -= 1\n    }\n  }\n})\n\nconst optionsWORemainder = createSlice({\n  //Package\n  name: 'OptionsWORemainders',\n  initialState: [],\n  reducers: {\n    setOptions: (state,action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      console.log(\"redux store: set Options: \")\n      state.value.push(action.payload);\n    },\n  }\n})\n\nconst optionsWRemainder = createSlice({\n  //Package\n  name: 'OptionsWRemainders',\n  initialState: [{ Package: [], Remainder: 0, Price: 0 }],\n  reducers: {\n    incremented: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decremented: state => {\n      state.value -= 1\n    }\n  }\n})\n\n\nexport const { testStore } = test.actions\n\nexport const store = configureStore({\n  reducer: {\n    test: test.reducer\n  }\n})\n\n\n// Can still subscribe to the store\nstore.subscribe(() => console.log(store.getState()))\n"]},"metadata":{},"sourceType":"module"}