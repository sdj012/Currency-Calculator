{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createSlice, createAsyncThunk, configureStore, counterSlice } from '@reduxjs/toolkit';\nimport getOptions from \"../Utils\";\nexport var fetchOptions = createAsyncThunk('optionsSlice/fetchOptions', function _callee() {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log(\"fetchOptions: \" + options);\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nvar options = createSlice({\n  name: 'options',\n  initialState: {\n    options: []\n  },\n  reducers: {\n    optionsStore: function optionsStore(state, action) {\n      console.log(\"optionsStore, action.payload = \" + action.payload);\n      console.log(\"state.value is: \" + state.value);\n    }\n  },\n  extraReducers: _defineProperty({}, fetchOptions.fulfilled, function (state, action) {\n    state.options.push(action.payload);\n  })\n});\nvar optionsStore = options.actions.optionsStore;\nexport { optionsStore };\nexport default options.reducer;","map":{"version":3,"sources":["/Users/sdj/Desktop/WEB/ReactNativeProject-purchaseGuide-1/my-app/Store/optionsSlice.js"],"names":["createSlice","createAsyncThunk","configureStore","counterSlice","getOptions","fetchOptions","console","log","options","name","initialState","reducers","optionsStore","state","action","payload","value","extraReducers","fulfilled","push","actions","reducer"],"mappings":";;AAAA,SAASA,WAAT,EAAqBC,gBAArB,EAAuCC,cAAvC,EAAuDC,YAAvD,QAA2E,kBAA3E;AACA,OAAOC,UAAP;AAGA,OAAO,IAAMC,YAAY,GAAGJ,gBAAgB,CAC1C,2BAD0C,EAE1C;AAAA;AAAA;AAAA;AAAA;AACAK,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBC,OAA/B;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAF0C,CAArC;AAYP,IAAMA,OAAO,GAAGR,WAAW,CAAC;AAE1BS,EAAAA,IAAI,EAAE,SAFoB;AAG1BC,EAAAA,YAAY,EAAE;AAAEF,IAAAA,OAAO,EAAC;AAAV,GAHY;AAI1BG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,EAAE,sBAACC,KAAD,EAAOC,MAAP,EAAkB;AAK9BR,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoCO,MAAM,CAACC,OAAvD;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBM,KAAK,CAACG,KAAvC;AACD;AARO,GAJgB;AAe1BC,EAAAA,aAAa,sBACVZ,YAAY,CAACa,SADH,EACe,UAACL,KAAD,EAAOC,MAAP,EAAkB;AAC1CD,IAAAA,KAAK,CAACL,OAAN,CAAcW,IAAd,CAAmBL,MAAM,CAACC,OAA1B;AACD,GAHU;AAfa,CAAD,CAA3B;AAsBO,IAAQH,YAAR,GAAyBJ,OAAO,CAACY,OAAjC,CAAQR,YAAR;;AAEP,eAAeJ,OAAO,CAACa,OAAvB","sourcesContent":["import { createSlice,createAsyncThunk, configureStore, counterSlice } from '@reduxjs/toolkit'\nimport getOptions from '../Utils'\n// Thunk\n\nexport const fetchOptions = createAsyncThunk (\n  'optionsSlice/fetchOptions',\n  async() => {\n  console.log(\"fetchOptions: \" + options)\n  // const state= getState();\n  // let packages=state.settings.configurations.map(configuration => configuration.id);\n  // let options=[];\n  // options=await configureSet(state.target.value, packages);\n  // console.log(\"fetchOptions: \" + options)\n  // return options;\n})\n\nconst options = createSlice({\n  //Package\n  name: 'options',\n  initialState: { options:[] } ,\n  reducers: {\n    optionsStore: (state,action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      console.log(\"optionsStore, action.payload = \" + action.payload)\n      console.log(\"state.value is: \" + state.value)\n    },\n  },\n\n  extraReducers:{\n    [fetchOptions.fulfilled]: (state,action) => {\n      state.options.push(action.payload) // What Thunk Returns\n    }\n  }\n})\n\nexport const { optionsStore } = options.actions\n\nexport default options.reducer;\n\n\n// Can still subscribe to the store\n// store.subscribe(() => console.log(store.getState()))\n"]},"metadata":{},"sourceType":"module"}