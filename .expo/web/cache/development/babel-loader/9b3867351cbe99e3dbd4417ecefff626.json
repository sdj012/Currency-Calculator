{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createSlice, createAsyncThunk, configureStore, counterSlice } from '@reduxjs/toolkit';\nimport getOptions from \"../Utils\";\nexport var fetchOptions = createAsyncThunk('optionsSlice/fetchOptions', function _callee(getState) {\n  var state, packages, options;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          state = getState();\n          packages = state.settings.configurations.map(function (configuration) {\n            return configuration.id;\n          });\n          options = [];\n          console.log(\"fetchOptions: \" + options);\n          return _context.abrupt(\"return\", options);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nvar options = createSlice({\n  name: 'options',\n  initialState: {\n    options: []\n  },\n  reducers: {\n    optionsStore: function optionsStore(state, action) {\n      console.log(\"optionsStore, action.payload = \" + action.payload);\n      console.log(\"state.value is: \" + state.value);\n    }\n  },\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchOptions.fulfilled, function (state, action) {\n      state.options.push(action.payload);\n    });\n  }\n});\nvar optionsStore = options.actions.optionsStore;\nexport { optionsStore };\nexport default options.reducer;","map":{"version":3,"sources":["/Users/sdj/Desktop/WEB/ReactNativeProject-purchaseGuide-1/my-app/Store/optionsSlice.js"],"names":["createSlice","createAsyncThunk","configureStore","counterSlice","getOptions","fetchOptions","getState","state","packages","settings","configurations","map","configuration","id","options","console","log","name","initialState","reducers","optionsStore","action","payload","value","extraReducers","builder","addCase","fulfilled","push","actions","reducer"],"mappings":";AAAA,SAASA,WAAT,EAAqBC,gBAArB,EAAuCC,cAAvC,EAAuDC,YAAvD,QAA2E,kBAA3E;AACA,OAAOC,UAAP;AAGA,OAAO,IAAMC,YAAY,GAAGJ,gBAAgB,CAAE,2BAAF,EAA+B,iBAAOK,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACnEC,UAAAA,KADmE,GAC5DD,QAAQ,EADoD;AAErEE,UAAAA,QAFqE,GAE5DD,KAAK,CAACE,QAAN,CAAeC,cAAf,CAA8BC,GAA9B,CAAkC,UAAAC,aAAa;AAAA,mBAAIA,aAAa,CAACC,EAAlB;AAAA,WAA/C,CAF4D;AAGrEC,UAAAA,OAHqE,GAG7D,EAH6D;AAKzEC,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBF,OAA/B;AALyE,2CAMlEA,OANkE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA/B,CAArC;AASP,IAAMA,OAAO,GAAGd,WAAW,CAAC;AAE1BiB,EAAAA,IAAI,EAAE,SAFoB;AAG1BC,EAAAA,YAAY,EAAE;AAAEJ,IAAAA,OAAO,EAAC;AAAV,GAHY;AAI1BK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,EAAE,sBAACb,KAAD,EAAOc,MAAP,EAAkB;AAK9BN,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoCK,MAAM,CAACC,OAAvD;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBT,KAAK,CAACgB,KAAvC;AACD;AARO,GAJgB;AAe1BC,EAAAA,aAAa,EAAE,uBAACC,OAAD,EAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBrB,YAAY,CAACsB,SAA7B,EAAwC,UAACpB,KAAD,EAAOc,MAAP,EAAkB;AACxDd,MAAAA,KAAK,CAACO,OAAN,CAAcc,IAAd,CAAmBP,MAAM,CAACC,OAA1B;AACD,KAFD;AAGD;AAnByB,CAAD,CAA3B;AAsBO,IAAQF,YAAR,GAAyBN,OAAO,CAACe,OAAjC,CAAQT,YAAR;;AAEP,eAAeN,OAAO,CAACgB,OAAvB","sourcesContent":["import { createSlice,createAsyncThunk, configureStore, counterSlice } from '@reduxjs/toolkit'\nimport getOptions from '../Utils'\n// Thunk\n\nexport const fetchOptions = createAsyncThunk ('optionsSlice/fetchOptions', async( getState ) => {\n  const state= getState();\n  let packages=state.settings.configurations.map(configuration => configuration.id);\n  let options=[];\n  // options=await configureSet(state.target.value, packages);\n  console.log(\"fetchOptions: \" + options)\n  return options;\n})\n\nconst options = createSlice({\n  //Package\n  name: 'options',\n  initialState: { options:[] } ,\n  reducers: {\n    optionsStore: (state,action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      console.log(\"optionsStore, action.payload = \" + action.payload)\n      console.log(\"state.value is: \" + state.value)\n    },\n  },\n\n  extraReducers: (builder) => {\n    builder.addCase(fetchOptions.fulfilled, (state,action) => {\n      state.options.push(action.payload) // What Thunk Returns\n    })\n  }\n})\n\nexport const { optionsStore } = options.actions\n\nexport default options.reducer;\n\n\n// Can still subscribe to the store\n// store.subscribe(() => console.log(store.getState()))\n"]},"metadata":{},"sourceType":"module"}