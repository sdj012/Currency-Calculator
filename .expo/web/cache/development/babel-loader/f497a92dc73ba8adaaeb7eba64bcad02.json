{"ast":null,"code":"import { createSlice, configureStore } from '@reduxjs/toolkit';\nvar series = createSlice({\n  name: 'Series',\n  initialState: [{\n    Size: 400\n  }, {\n    Size: 800\n  }, {\n    Size: 1700\n  }],\n  reducers: {\n    incremented: function incremented(state) {\n      state.value += 1;\n    },\n    decremented: function decremented(state) {\n      state.value -= 1;\n    }\n  }\n});\nvar createPackage = createSlice({\n  name: 'Create Package',\n  initialState: [{\n    Size: 400,\n    Price: 6.49\n  }, {\n    Size: 800,\n    Price: 12.99\n  }, {\n    Size: 1700,\n    Price: 25.99\n  }],\n  reducers: {\n    incremented: function incremented(state) {\n      state.value += 1;\n    },\n    decremented: function decremented(state) {\n      state.value -= 1;\n    }\n  }\n});\nvar optionsWORemainder = createSlice({\n  name: 'OptionsWORemainders',\n  initialState: [],\n  reducers: {\n    setOptions: function setOptions(state, action) {\n      state.value.push(action.payload);\n    }\n  }\n});\nvar optionsWRemainder = createSlice({\n  name: 'OptionsWRemainders',\n  initialState: [{\n    Package: [],\n    Remainder: 0,\n    Price: 0\n  }],\n  reducers: {\n    incremented: function incremented(state) {\n      state.value += 1;\n    },\n    decremented: function decremented(state) {\n      state.value -= 1;\n    }\n  }\n});\nvar _counterSlice$actions = counterSlice.actions,\n    incremented = _counterSlice$actions.incremented,\n    decremented = _counterSlice$actions.decremented;\nexport { incremented, decremented };\nvar store = configureStore({\n  reducer: counterSlice.reducer\n});\nstore.subscribe(function () {\n  return console.log(store.getState());\n});\nstore.dispatch(incremented());\nstore.dispatch(incremented());\nstore.dispatch(decremented());","map":{"version":3,"sources":["/Users/sdj/Desktop/WEB/ReactNativeProject-purchaseGuide-1/my-app/Store/store.js"],"names":["createSlice","configureStore","series","name","initialState","Size","reducers","incremented","state","value","decremented","createPackage","Price","optionsWORemainder","setOptions","action","push","payload","optionsWRemainder","Package","Remainder","counterSlice","actions","store","reducer","subscribe","console","log","getState","dispatch"],"mappings":"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","sourcesContent":["import { createSlice, configureStore } from '@reduxjs/toolkit'\n\nconst series = createSlice({\n  //Package\n  name: 'Series',\n  initialState: [ { Size: 400 },{ Size: 800 }, { Size: 1700 } ],\n  reducers: {\n    incremented: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decremented: state => {\n      state.value -= 1\n    }\n  }\n})\n\nconst createPackage = createSlice({\n  //Package\n  name: 'Create Package',\n  initialState: [{ Size: 400 , Price: 6.49 },{ Size: 800, Price: 12.99 }, { Size: 1700, Price: 25.99}],\n  reducers: {\n    incremented: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decremented: state => {\n      state.value -= 1\n    }\n  }\n})\n\nconst optionsWORemainder = createSlice({\n  //Package\n  name: 'OptionsWORemainders',\n  initialState: [],\n  reducers: {\n    setOptions: (state,action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value.push(action.payload);\n    },\n  }\n})\n\nconst optionsWRemainder = createSlice({\n  //Package\n  name: 'OptionsWRemainders',\n  initialState: [{ Package: [], Remainder: 0, Price: 0 }],\n  reducers: {\n    incremented: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decremented: state => {\n      state.value -= 1\n    }\n  }\n})\n\n\nexport const { incremented, decremented } = counterSlice.actions\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n})\n\n// Can still subscribe to the store\nstore.subscribe(() => console.log(store.getState()))\n\n// Still pass action objects to `dispatch`, but they're created for us\nstore.dispatch(incremented())\n// {value: 1}\nstore.dispatch(incremented())\n// {value: 2}\nstore.dispatch(decremented())\n// {value: 1}"]},"metadata":{},"sourceType":"module"}